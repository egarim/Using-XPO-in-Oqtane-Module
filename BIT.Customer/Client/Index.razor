@using BIT.Customer.Services
@using BIT.Customer.Models

@namespace BIT.Customer
@inherits ModuleBase
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

@if (_Customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Customer" />
    <br />
    <br />
    @if (@_Customers.Count != 0)
    {
        <Pager Items="@_Customers">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>Name</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.CustomerId.ToString())" /></td>
                <td><ActionDialog Header="Delete Customer" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Customer?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>No Customers To Display</p>
    }
}

<!-- The content below is for informational purposes only and can be safely removed -->

<hr />
Customer Module Created Successfully. Use Edit Mode To Add A Customer. You Can Access The Files At The Following Locations:<br /><br />
C:\Users\Joche\Desktop\OqtaneXpo\BIT.Customer\Client\<br />
- BIT.Customer.Client.csproj - client project<br />
- _Imports.razor - global imports for module components<br />
- Edit.razor - component for adding or editing content<br />
- Index.razor - main component for your module **the content you are reading is in this file**<br />
- ModuleInfo.cs - implements IModule interface to provide configuration settings for your module<br />
- Settings.razor - component for managing module settings<br />
- Services\ICustomerService.cs - interface for defining service API methods<br />
- Services\CustomerService.cs - implements service API interface methods<br /><br />
C:\Users\Joche\Desktop\OqtaneXpo\BIT.Customer\Package\<br />
- BIT.Customer.nuspec - nuget manifest for packaging module<br />
- BIT.Customer.Package.csproj - packaging project<br />
- debug.cmd - copies assemblies to Oqtane bin folder when in Debug mode<br />
- release.cmd - creates nuget package and deploys to Oqtane wwwroot/modules folder when in Release mode<br /><br />
C:\Users\Joche\Desktop\OqtaneXpo\BIT.Customer\Server\<br />
- BIT.Customer.Server.csproj - server project<br />
- Controllers\CustomerController.cs - API methods implemented using a REST pattern<br />
- Manager\CustomerManager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\ICustomerRepository.cs - interface for defining repository methods<br />
- Repository\CustomerRespository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\CustomerContext.cs - provides a DB Context for data access<br />
- Scripts\BIT.Customer.1.0.0.sql - database schema definition script<br />
- Scripts\BIT.Customer.Uninstall.sql - database uninstall script<br />
- wwwroot\Module.css - module style sheet<br /><br />
C:\Users\Joche\Desktop\OqtaneXpo\BIT.Customer\Shared\<br />
- BIT.Customer.csproj - shared project<br />
- Models\Customer.cs - model definition<br /><br />

<!-- The content above is for informational purposes only and can be safely removed -->

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Customer> _Customers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _Customers = await CustomerService.GetCustomersAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Customer {Error}", ex.Message);
            AddModuleMessage("Error Loading Customer", MessageType.Error);
        }
    }

    private async Task Delete(Customer Customer)
    {
        try
        {
            await CustomerService.DeleteCustomerAsync(Customer.CustomerId, ModuleState.ModuleId);
            await logger.LogInformation("Customer Deleted {Customer}", Customer);
            _Customers = await CustomerService.GetCustomersAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Customer {Customer} {Error}", Customer, ex.Message);
            AddModuleMessage("Error Deleting Customer", MessageType.Error);
        }
    }
}